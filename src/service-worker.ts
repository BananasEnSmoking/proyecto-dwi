/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute, NavigationRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { cacheNames, setCacheNameDetails } from 'workbox-core';
import { CacheFirst } from "workbox-strategies";
import { BackgroundSyncPlugin, Queue } from 'workbox-background-sync';
import { NetworkOnly } from "workbox-strategies";
import OneSignalReact from "react-onesignal";
import { sendNotification } from "./notifications";
import logo from "./img/isologo/BES.png";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// set cache Name for installing and run-time
setCacheNameDetails({
  prefix: 'bes',
  suffix: 'v4',
  precache: 'precache',
  runtime: 'run-time'
});

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA

precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }
    
    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);


// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png') || url.pathname.endsWith('.ico'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'bes-data-v4',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 40 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Next functions get the data from the API when their corresponding calls are fulfull
// So this way we get the products and the cart 
registerRoute(
  ({ url }) => url.pathname == '/products' || url.pathname == '/getCar' ||
  url.pathname == '/infoUsuario',
  new CacheFirst({
    cacheName: 'bes-data-v4',
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 24 * 60 * 30
      })
    ]
  })
);

/*self.addEventListener('offline', () => {
  //sendNotification('Applications is offline, cannot complete requests for the moment')
  console.log('you are offline');
});

self.addEventListener('online', () => {
  //sendNotification('Applications is online, will complete your request as soon as possible')
  console.log('you are online');
  OneSignalReact.sendSelfNotification(
    "Bananas en Smoking",
    "You are online again. Will try to complete pending requests",
    "http://localost:3000",
    logo,
    {
      notificationType: "online"
    },
    [{
      id: 'like-button',
      text: 'Like',
      'icon': logo,
      'url': "http://localhost:3000"
    },
    {
      id: 'read-more-button',
      text: 'Read more',
      icon: logo,
      url: 'http://localhost:3000'
    }
  ]
  );
});*/

/*const bgSyncQueue = new Queue('product-queue', {
  onSync: () => {
    OneSignalReact.sendOutcome(
      "Back online! Request can't be completed",
      3532
      )
    },
    maxRetentionTime: 30 * 60
  });*/
  
  // Next two functions work with two different background sync plugins 
  // so when user is offline and try to do one of these, they get saved 
  // in the indexedDB and are fulfill once the connection is restablished     
  const bgSyncPlugin = new BackgroundSyncPlugin('requests-queue', {});
   
  registerRoute(
    ({ url }) => url.pathname === '/insertProduct' || url.pathname === '/insertCar' ||
      url.pathname === '/deleteItemCar', 
    new NetworkOnly({
      plugins: [ 
        bgSyncPlugin,
        new ExpirationPlugin({
          maxAgeSeconds: 24 * 60
        })
      ]
    }),
    'POST'
  );